PeerInfo {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  publicKey: <Buffer 25 9b fd 10 43 52 df 75 4c dd b7 f6 10 be f6 cd 86 0a e2 ea a9 20 9d e0 af 5e cc bd bb e9 fb 89>,
  relayAddresses: [],
  reconnecting: true,
  proven: true,
  banned: false,
  tried: false,
  queued: false,
  client: true,
  topics: [
    <Buffer 73 65 6e 73 6f 72 20 6e 65 74 77 6f 72 6b 73 65 6e 73 6f 72 20 6e 65 74 77 6f 72 6b 73 65 6e 73>
  ],
  attempts: 0,
  priority: 2,
  _index: 0,
  _flushTick: 0,
  _seenTopics: Set(1) {
    '73656e736f72206e6574776f726b73656e736f72206e6574776f726b73656e73'
  },
  [Symbol(kCapture)]: false
}

Socket:

<ref *1> NoiseSecretStream {
  _events: [Object: null prototype] {
    close: [ [Function (anonymous)], [Function (anonymous)] ],
    open: [Function (anonymous)]
  },
  _eventsCount: 2,
  _maxListeners: undefined,
  _duplexState: 196632,
  _readableState: ReadableState {
    stream: [Circular *1],
    queue: FastFIFO { hwm: 16, head: [FixedFIFO], tail: [FixedFIFO] },
    highWaterMark: 16384,
    buffered: 0,
    error: null,
    pipeline: null,
    byteLength: [Function: defaultByteLength],
    map: null,
    pipeTo: null,
    afterRead: [Function: bound afterRead],
    afterUpdateNextTick: [Function: bound updateReadNT]
  },
  _writableState: WritableState {
    stream: [Circular *1],
    queue: FastFIFO { hwm: 16, head: [FixedFIFO], tail: [FixedFIFO] },
    highWaterMark: 16384,
    buffered: 0,
    error: null,
    pipeline: null,
    byteLength: [Function: defaultByteLength],
    map: [Function: toBuffer],
    afterWrite: [Function: bound afterWrite],
    afterUpdateNextTick: [Function: bound updateWriteNT]
  },
  noiseStream: [Circular *1],
  isInitiator: true,
  rawStream: <ref *2> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: false,
      constructed: true,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: true,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: true,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      dataEmitted: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    _events: [Object: null prototype] {
      end: [Array],
      error: [Function: bound _onrawerror],
      close: [Function: bound _onrawclose],
      data: [Function: bound _onrawdata],
      drain: [Function: bound _onrawdrain]
    },
    _eventsCount: 5,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: [Object],
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 1,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: null,
    _server: null,
    [Symbol(async_id_symbol)]: 484,
    [Symbol(kHandle)]: TCP {
      reading: false,
      onconnection: null,
      [Symbol(owner_symbol)]: [Circular *2]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  publicKey: <Buffer 78 f6 00 6d e3 71 87 eb 88 49 7b 6f e3 08 99 36 72 b5 f5 6c 88 45 0e 3e 89 99 e1 f5 da b4 6b ac>,
  remotePublicKey: <Buffer 25 9b fd 10 43 52 df 75 4c dd b7 f6 10 be f6 cd 86 0a e2 ea a9 20 9d e0 af 5e cc bd bb e9 fb 89>,
  handshakeHash: <Buffer 8b da 2f 7c a6 8e 8d bd 2c 68 99 9e f2 14 4e 63 d8 21 69 f9 cf df 22 29 51 86 b8 56 14 1c ac 48 af 87 f0 8b 53 8a 52 a2 ef f6 31 66 53 f1 eb 4d d8 59 ... 14 more bytes>,
  userData: null,
  opened: Promise { true },
  _rawStream: <ref *2> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: false,
      constructed: true,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: true,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: true,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      dataEmitted: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    _events: [Object: null prototype] {
      end: [Array],
      error: [Function: bound _onrawerror],
      close: [Function: bound _onrawclose],
      data: [Function: bound _onrawdata],
      drain: [Function: bound _onrawdrain]
    },
    _eventsCount: 5,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: [Object],
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 1,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: null,
    _server: null,
    [Symbol(async_id_symbol)]: 484,
    [Symbol(kHandle)]: TCP {
      reading: false,
      onconnection: null,
      [Symbol(owner_symbol)]: [Circular *2]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _handshake: null,
  _handshakePattern: null,
  _handshakeDone: null,
  _state: 0,
  _len: 0,
  _tmp: 1,
  _message: null,
  _openedDone: null,
  _startDone: null,
  _drainDone: null,
  _outgoingPlain: null,
  _outgoingWrapped: null,
  _utp: null,
  _setup: true,
  _ended: 2,
  _encrypt: Push {
    key: <Buffer 30 5e be 30 b8 14 c0 6b 45 f3 f3 dc de 00 c0 82 8d 9d 90 77 e3 ce 38 5e ab c6 4d fb 6e 42 b3 27>,
    state: <Buffer 04 61 f5 22 95 bd 1a 31 48 a1 38 bb b2 ec b7 7b fe 1e c8 ee 3b f0 39 f4 cf 48 c9 b7 02 b3 21 33 01 00 00 00 80 c3 61 89 97 7d be b7 00 00 00 00 00 00 ... 2 more bytes>,
    header: <Buffer 54 e7 69 50 3c 22 54 99 c3 ac 7d 30 1c ae f5 68 80 c3 61 89 97 7d be b7>
  },
  _decrypt: Pull {
    key: <Buffer b0 b8 55 4b fa 67 ef 53 f9 93 fc ea 32 0f 0a d1 5f 9f 90 c2 2a bb a0 fb d6 57 dc f5 10 58 4d 37>,
    state: <Buffer 00 00 00 00 00 00 00 00 98 2b 84 59 e7 7f 00 00 01 00 00 00 84 04 00 00 01 09 00 00 00 00 00 00 74 04 00 00 31 00 00 00 78 04 00 00 a9 01 00 00 e0 26 ... 2 more bytes>,
    final: false
  },
  _timeout: null,
  _timeoutMs: 0,
  _keepAlive: null,
  _keepAliveMs: 0,
  [Symbol(kCapture)]: false
}
